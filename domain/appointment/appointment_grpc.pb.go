// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: domain/appointment/proto/appointment.proto

package appointment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppointmentServiceClient is the client API for AppointmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppointmentServiceClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppointmentListProto, error)
	ListByParam(ctx context.Context, in *AppointmentProto, opts ...grpc.CallOption) (*AppointmentListProto, error)
	Get(ctx context.Context, in *AppointmentGetProto, opts ...grpc.CallOption) (*AppointmentProto, error)
	Add(ctx context.Context, in *AppointmentAddProto, opts ...grpc.CallOption) (*AppointmentProto, error)
	Update(ctx context.Context, in *AppointmentUpdateProto, opts ...grpc.CallOption) (*AppointmentProto, error)
	Delete(ctx context.Context, in *AppointmentDeleteProto, opts ...grpc.CallOption) (*AppointmentDeleteResponseProto, error)
}

type appointmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppointmentServiceClient(cc grpc.ClientConnInterface) AppointmentServiceClient {
	return &appointmentServiceClient{cc}
}

func (c *appointmentServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppointmentListProto, error) {
	out := new(AppointmentListProto)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) ListByParam(ctx context.Context, in *AppointmentProto, opts ...grpc.CallOption) (*AppointmentListProto, error) {
	out := new(AppointmentListProto)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/ListByParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) Get(ctx context.Context, in *AppointmentGetProto, opts ...grpc.CallOption) (*AppointmentProto, error) {
	out := new(AppointmentProto)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) Add(ctx context.Context, in *AppointmentAddProto, opts ...grpc.CallOption) (*AppointmentProto, error) {
	out := new(AppointmentProto)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) Update(ctx context.Context, in *AppointmentUpdateProto, opts ...grpc.CallOption) (*AppointmentProto, error) {
	out := new(AppointmentProto)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) Delete(ctx context.Context, in *AppointmentDeleteProto, opts ...grpc.CallOption) (*AppointmentDeleteResponseProto, error) {
	out := new(AppointmentDeleteResponseProto)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppointmentServiceServer is the server API for AppointmentService service.
// All implementations must embed UnimplementedAppointmentServiceServer
// for forward compatibility
type AppointmentServiceServer interface {
	List(context.Context, *emptypb.Empty) (*AppointmentListProto, error)
	ListByParam(context.Context, *AppointmentProto) (*AppointmentListProto, error)
	Get(context.Context, *AppointmentGetProto) (*AppointmentProto, error)
	Add(context.Context, *AppointmentAddProto) (*AppointmentProto, error)
	Update(context.Context, *AppointmentUpdateProto) (*AppointmentProto, error)
	Delete(context.Context, *AppointmentDeleteProto) (*AppointmentDeleteResponseProto, error)
	mustEmbedUnimplementedAppointmentServiceServer()
}

// UnimplementedAppointmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppointmentServiceServer struct {
}

func (UnimplementedAppointmentServiceServer) List(context.Context, *emptypb.Empty) (*AppointmentListProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAppointmentServiceServer) ListByParam(context.Context, *AppointmentProto) (*AppointmentListProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByParam not implemented")
}
func (UnimplementedAppointmentServiceServer) Get(context.Context, *AppointmentGetProto) (*AppointmentProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppointmentServiceServer) Add(context.Context, *AppointmentAddProto) (*AppointmentProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAppointmentServiceServer) Update(context.Context, *AppointmentUpdateProto) (*AppointmentProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAppointmentServiceServer) Delete(context.Context, *AppointmentDeleteProto) (*AppointmentDeleteResponseProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAppointmentServiceServer) mustEmbedUnimplementedAppointmentServiceServer() {}

// UnsafeAppointmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppointmentServiceServer will
// result in compilation errors.
type UnsafeAppointmentServiceServer interface {
	mustEmbedUnimplementedAppointmentServiceServer()
}

func RegisterAppointmentServiceServer(s grpc.ServiceRegistrar, srv AppointmentServiceServer) {
	s.RegisterService(&AppointmentService_ServiceDesc, srv)
}

func _AppointmentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_ListByParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).ListByParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/ListByParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).ListByParam(ctx, req.(*AppointmentProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentGetProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).Get(ctx, req.(*AppointmentGetProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentAddProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).Add(ctx, req.(*AppointmentAddProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentUpdateProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).Update(ctx, req.(*AppointmentUpdateProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentDeleteProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).Delete(ctx, req.(*AppointmentDeleteProto))
	}
	return interceptor(ctx, in, info, handler)
}

// AppointmentService_ServiceDesc is the grpc.ServiceDesc for AppointmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppointmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appointment.AppointmentService",
	HandlerType: (*AppointmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _AppointmentService_List_Handler,
		},
		{
			MethodName: "ListByParam",
			Handler:    _AppointmentService_ListByParam_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AppointmentService_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _AppointmentService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AppointmentService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AppointmentService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain/appointment/proto/appointment.proto",
}
